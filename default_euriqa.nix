{ sources ? import ./nix/sources.nix {}
  # Pinned nixpkgs & artiq-full to a consistent version for maximum repeatability.
  # This could be an issue in the future (things get out of date, people forget how to
  # update Nix things, in which case uncomment the appropriate lines)
#, pkgs ? import sources.nixpkgs {}
, pkgs ? import sources.nixpkgs { overlays = [ (import "${sources.pulsecompiler}/nix/python-overlay.nix") ]; }
  # pkgs ? import <nixpkgs> {}
, drewrisinger-nur ? import sources.drewrisinger-nur-packages { rawpkgs = pkgs; }
, artiqpkgs ? import ./nix/artiqpkgs.nix { inherit pkgs sources; } 
#, drewrisinger-nur ? import
#    (pkgs.applyPatches {
#      # temporary patch, while stuck on this commit of NUR (handled in later versions). nixos-21.05 renamed google_api_core -> google-api-core
#      name = "drew-nur-pkgs-patched";
#      src = sources.drewrisinger-nur-packages;
#      # generated by checking out the commit, making any changes, and then git diff --patch > .../nix/patch-nur.patch
#      patches = [
#        ./nix/patch-nur.patch
#      ];
#    })
#    { inherit pkgs; }
, pulsecompiler ? pkgs.callPackage sources.pulsecompiler { inherit drewrisinger-nur; inherit (artiqpkgs) sipyco; }
}:
# Similar to import <artiq-full> { inherit pkgs; } from ARTIQ manual

# Build the EURIQA python package.
let
  # NOTE: next line is IMPORTANT. This must be like this in order to use python in "development" mode,
  # where code changes are reflected in your shell.
  # This isn't "nix pure", but it's a decent compromise for a physics experiment.
  srcDir = ./.;
  lib = pkgs.lib;
  gitCommitID = lib.commitIdFromGitRepo "${toString srcDir}/.git";
  gitCommitIDShort = builtins.substring 0 7 gitCommitID;
  gitignoreSource = (import sources.gitignore { inherit (pkgs) lib; }).gitignoreSource;
in
pkgs.python3Packages.buildPythonPackage rec {
  pname = "euriqa";
  version = "unstable-git-${gitCommitIDShort}";
  format = "setuptools";  # uses setup.py. Change to "pyproject" if use pyproject.toml

  src = gitignoreSource srcDir;

  # Save git version hash to file for euriqabackend to read for version number
  postPatch = ''
    echo "Recording source git hash"
    echo ${gitCommitIDShort} > ./euriqabackend/GIT_REV.hash

    substituteInPlace ./euriqabackend/__init__.py --replace "_STATIC_BUILD = False" "_STATIC_BUILD = True"
  '';

  nativeBuildInputs = [ pkgs.qt5.wrapQtAppsHook ];
  buildInputs = with pkgs.python3Packages; [ pytestrunner setuptools ];
  propagatedBuildInputs = [
    pulsecompiler.pulsecompiler
  ] ++ (with artiqpkgs; [ artiq artiq-comtools sipyco ])
  ++ (
    with drewrisinger-nur.python3Packages;
    [
      cirq
      qiskit-terra
      qiskit-ibmq-provider
      (numdifftools.overridePythonAttrs (oldAttrs: { doCheck = false; }))
      (oitg.overridePythonAttrs(oldAttrs: {
        patches = [(
          # patch a bug in the linear fitting routine w/ 0-indexing vs 1-indexing
          # https://github.com/OxfordIonTrapGroup/oitg/pull/42
          pkgs.fetchpatch {
            name = "pr-42-fix-linear-fit-indexing.patch";
            url = "https://github.com/OxfordIonTrapGroup/oitg/commit/294a22d4366696156c372fb480822b483c5e6d1d.patch";
            sha256 = "sha256-KoJYWzSEqfu8G66kV6TgmOAeTKRUUeiw7tOwfnaZavw=";
          })] ++ (oldAttrs.patches or []);
        })
      )
      python-box
      pyvisa
      pyvisa-py
    ]
  )
  ++ (
    with pkgs.python3Packages;
    [
      click
      h5py
      more-itertools
      networkx
      numpy
      pandas
      pint
      ply
      prettytable
      progress
      pytest
      pyyaml
      scipy
      statsmodels
      tables
      uncertainties
      # cython
    ]
  );

  doCheck = false;

  postInstall = ''
    wrapQtApp $out/bin/100x_dac_gui --prefix PYTHONPATH : $PYTHONPATH
  '';

  CHECK_NAS_DIR = "OFF";
  pythonImportsCheck = [ "euriqabackend" "euriqafrontend" ];
  dontUseSetuptoolsCheck = true;
  checkInputs = with pkgs.python3Packages; [
    pytestCheckHook
    qiskit-aer
    pytest-timeout
  ];

  # Commands to run before & after loading the python environment into the nix-shell
  # These are only run by ``nix-shell``, and are useful for debugging/checking that we're
  # in the proper directory and the desired packages are available
  preShellHook = ''
    # Debug mode, the extra verbosity is worth it if it fails
    set -x

    # add srcDir to the PYTHONPATH. Allows ARTIQ subprocesses (e.g. controllers) to find euriqabackend
    # otherwise, have import errors when starting controllers
    export PYTHONPATH=${toString srcDir}:$PYTHONPATH

    # Force installing euriqa package from srcDir. This allows shell to be run from anywhere
    pushd ${toString srcDir}

    # Check that this nix shell is started from the root of euriqa-artiq project (i.e. that it has a setup.py).
    # Development mode won't work properly if not in root.
    if [ $(pwd) != "${toString srcDir}" ] || test ! -e ${if format == "setuptools" then "setup.py" else "pyproject.toml"}; then
      echo "ERROR: Must be run from root directory of EURIQA project"
      set +x
      exit 1
    fi

    # Removes duplicates from PYTHONPATH, PATH to get it to a reasonable size, maintains order.
    # Bit of shell magic from https://www.linuxjournal.com/content/removing-duplicate-path-entries
    # Otherwise, can occasionally have some failures in the development setup, "argument list too long"
    # (probably due to lack of memory for forking processes) in standard programs like mktemp
    # This is needed to get ./shell.nix working with VSCode Plugin "arrterian.nix-env-selector"
    export PYTHONPATH=$(echo -n $PYTHONPATH | awk -v RS=: '!($0 in a) {a[$0]; printf("%s%s", length(a) > 1 ? ":" : "", $0)}')
    export PYTHONPATH=/home/euriqa/git/euriqa-artiq/pulsecompiler:$PYTHONPATH
    # Do it for regular PATH too, because why not?
    export PATH=$(echo -n $PATH | awk -v RS=: '!($0 in a) {a[$0]; printf("%s%s", length(a) > 1 ? ":" : "", $0)}')
  '';
  postShellHook = ''
    # Check that euriqa package is present
    pushd /
    CHECK_NAS_DIR=OFF python -c "import euriqafrontend; import euriqabackend"
    if [ $? != 0 ]; then
      echo "ERROR: basic EURIQA import check failed. Check Nix is configured properly and your code is correct"
      set +x
      exit 1
    fi
    popd

    # Move back to original directory
    popd
    set +x  # stop debugging
  '';

  meta = with lib; {
    description = "Utilities and experiments for working with ARTIQ at UMD EURIQA.";
    homepage = "https://gitlab.com/UMD-EURIQA/euriqa-artiq";
    license = with licenses; [ unfree asl20 ];
    maintainers = with maintainers; [ drewrisinger ];
  };

  # Add attributes that can be accessed like THIS_PACKAGE.artiqpkgs
  # For passing the set of packages used back up the stack.
  passthru = {
    inherit artiqpkgs drewrisinger-nur;
    python3Packages = pkgs.python3Packages;
  };
}
